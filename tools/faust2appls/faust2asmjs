#!/bin/bash

#-------------------------------------------------------------------
# Wrapping resources

CODE_WRAPPER=""
JS_WRAPPER=""
COMB="false"
COMB_SRC=
COMB_EXPORTED=
COMB_WRAPPED=
COMB_WRAPPED_FILES=
COMB_SEP=

EMCC="false"
POLY="false"

#-------------------------------------------------------------------
# Set Faust include path

if [ -f $FAUST_LIB_PATH/music.lib ]
then
  FAUSTLIB=$FAUST_LIB_PATH
elif [ -f /usr/local/lib/faust/music.lib ]
then
  FAUSTLIB=/usr/local/lib/faust/
elif [ -f /usr/lib/faust/music.lib ]
then
  FAUSTLIB=/usr/lib/faust/
else
  error "$0: Cannot find Faust library dir (usually /usr/local/lib/faust)"
fi


#-------------------------------------------------------------------
# Analyze command arguments :
# faust options                 -> OPTIONS
# existing *.dsp files          -> FILES
#

for p in $@; do
    if [ $p = "-help" ] || [ $p = "-h" ]; then
        echo "faust2asmjs [-poly] [-comb] [-emcc] <file.dsp>"
        echo "Use '-poly' to produce a polyphonic DSP, ready to be used with MIDI events"
        echo "Use '-comb' to combine several DSP in a unique resulting 'comb.js' file, sharing the same Emcripten runtime"
        echo "Use '-emcc' to compile C++ generated code to asm.js with Emcripten, otherwise the internal asm.js backend is used"
    elif [ $p = "-comb" ]; then
        COMB="true"
    elif [ $p = "-poly" ]; then
        POLY="true"
    elif [ $p = "-emcc" ]; then
        EMCC=emcc
    elif [ ${p:0:1} = "-" ]; then
	    OPTIONS="$OPTIONS $p"
	elif [[ -e "$p" ]]; then
	    FILES="$FILES $p"
	else
	    OPTIONS="$OPTIONS $p"        
	fi
done

#-------------------------------------------------------------------
# Set the compilation wrapping files depending of the compilation options
#

if [ $POLY = true ]; then
    if [ $EMCC = emcc ]; then
        echo "Compiled with 'emcc' in polyphonic mode"
        CODE_WRAPPER=webaudio-asm-poly.cpp
        JS_WRAPPER=webaudio-asm-poly-emcc.js
    else
        echo "Compiled with 'asm.js' backend in polyphonic mode"
        CODE_WRAPPER=webaudio-asm-poly-standalone-wrapper.js
    fi
else
    if [ $EMCC = emcc ]; then
        echo "Compiled with 'emcc'"
        CODE_WRAPPER=webaudio-asm.cpp
        JS_WRAPPER=webaudio-asm-emcc.js       
    else
        echo "Compiled with 'asm.js' backend"
        CODE_WRAPPER=webaudio-asm-standalone-wrapper.js
    fi
fi

#-------------------------------------------------------------------
# compile the *.dsp files
#
BINARIES=""

if [ $COMB = "false" ]; then

for f in $FILES; do
    name=${f%.dsp}
    
    # compile the Faust DSP to C++ or asm.js code
    if [ $EMCC = emcc ] ; then
        faust -a $FAUSTLIB/webaudio/$CODE_WRAPPER -i -uim -cn $name $OPTIONS $f -o $name.cpp
    else
        faust -lang ajs -a $FAUSTLIB/webaudio/$CODE_WRAPPER -cn $name $OPTIONS $f -o $name.js
    fi
    
    if [ $EMCC = emcc ]; then
        
        # prepare emcc compilation files
        if [ $POLY = false ]; then

EXPORTED="['_"$name"_constructor','_"$name"_destructor','_"$name"_compute','_"$name"_getNumInputs','_"$name"_getNumOutputs','_"$name"_setValue','_"$name"_getValue','_"$name"_getJSON']"

        else
        EXPORTED="['_"$name"_poly_constructor','_"$name"_poly_destructor','_"$name"_poly_compute','_"$name"_poly_getNumInputs','_"$name"_poly_getNumOutputs','_"$name"_poly_setValue','_"$name"_poly_getValue','_"$name"_poly_getJSON','_"$name"_poly_keyOn','_"$name"_poly_keyOff','_"$name"_poly_allNotesOff','_"$name"_poly_ctrlChange','_"$name"_poly_pitchWheel','_"$name"_poly_pitchBend']"       
	
        fi
    
        # compile the C++ code to asm.js
        emcc -O2 --memory-init-file 0 $name.cpp -s TOTAL_STACK=20971520 -s TOTAL_MEMORY=41943040 --post-js $FAUSTLIB/webaudio/$JS_WRAPPER -o $name-temp.js \
            -s EXPORTED_FUNCTIONS=$EXPORTED
       
        # compose the asm.js code
        sed -e "s/DSP/"$name"/g" $name-temp.js > $name.js
        
        rm $name-temp.js
        rm $name.cpp
    fi

	# collect binary file name
	BINARIES="$BINARIES$name.js;"

done

else

echo "Compiled with 'comb' mode"

for f in $FILES; do
    name=${f%.dsp}
    
    # compile the Faust DSP to C++ or asm.js code
    if [ $EMCC = emcc ] ; then
        faust -a $FAUSTLIB/webaudio/$CODE_WRAPPER -i -uim -cn $name $OPTIONS $f -o $name.cpp
    else
        faust -lang ajs -a $FAUSTLIB/webaudio/$CODE_WRAPPER -cn $name $OPTIONS $f -o $name-temp.js
    fi
    
    if [ $EMCC = emcc ]; then
    
        # prepare emcc compilation files
        if [ $POLY = false ]; then

EXPORTED="'_"$name"_constructor','_"$name"_destructor','_"$name"_compute','_"$name"_getNumInputs','_"$name"_getNumOutputs','_"$name"_setValue','_"$name"_getValue','_"$name"_getJSON'"
        else
        EXPORTED="'_"$name"_poly_constructor','_"$name"_poly_destructor','_"$name"_poly_compute','_"$name"_poly_getNumInputs','_"$name"_poly_getNumOutputs','_"$name"_poly_setValue','_"$name"_poly_getValue','_"$name"_poly_getJSON','_"$name"_poly_keyOn','_"$name"_poly_keyOff','_"$name"_poly_allNotesOff','_"$name"_poly_ctrlChange','_"$name"_poly_pitchWheel','_"$name"_poly_pitchBend'"       
	
        fi
    
        # compose the asm.js code
        sed -e "s/DSP/"$name"/g" $FAUSTLIB/webaudio/$JS_WRAPPER > $name-wrapper.js
        
        COMB_SRC+=$name.cpp
        COMB_SRC+=" "
        
        COMB_EXPORTED+=$COMB_SEP$EXPORTED
        COMB_SEP=","
        
        COMB_WRAPPED_FILES+=$name-wrapper.js
        COMB_WRAPPED_FILES+=" "
        
        COMB_WRAPPED+=" --post-js "
        COMB_WRAPPED+=$name-wrapper.js
        
    else
        echo $name-temp.js
        cat $name-temp.js >> comb.js
        rm $name-temp.js
    fi
  	
done

if [ $EMCC = emcc ]; then
    # compile final file
    emcc -O2 --memory-init-file 0 $COMB_SRC -s TOTAL_STACK=20971520 -s TOTAL_MEMORY=41943040 $COMB_WRAPPED -o comb.js \
        -s EXPORTED_FUNCTIONS="["$COMB_EXPORTED"]"

rm $COMB_SRC
rm $COMB_WRAPPED_FILES

fi

# collect binary file name
BINARIES="comb.js;"

fi

echo $BINARIES
